{"version":3,"file":"static/js/307.a4999f46.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { addContacts } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Button, TextField, Container } from '@mui/material';\n\nimport PropTypes from 'prop-types';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = e.target.elements;\n\n    if (contacts.find(contact => contact.name === name.value)) {\n      alert(`${name.value} is already in contacts!`);\n      e.currentTarget.reset();\n      return;\n    }\n\n    const data = { name: name.value, phone: number.value };\n\n    dispatch(addContacts(data));\n    e.currentTarget.reset();\n  };\n\n  return (\n    <form autoComplete=\"off\" onSubmit={handleSubmit}>\n      <Container\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: '20px',\n          border: '1px solid gray',\n          borderRadius: '4px',\n          padding: '10px',\n          width: '350px',\n          marginBottom: '50px',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <label htmlFor=\"name\">\n          <TextField\n            type=\"text\"\n            label=\"Name\"\n            variant=\"standard\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n\n        <label htmlFor=\"number\">\n          <TextField\n            type=\"tel\"\n            label=\"Number\"\n            variant=\"standard\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n\n        <Button variant=\"contained\" type=\"submit\">\n          Add contact\n        </Button>\n      </Container>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n  contacts: PropTypes.arrayOf(PropTypes.shape()),\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { TextField } from '@mui/material';\nimport PropTypes from 'prop-types';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n  const onCnange = evt => dispatch(setFilter(evt.target.value));\n\n  return (\n    <label htmlFor=\"filter\">\n      <TextField\n        label=\"Find contact by name\"\n        variant=\"standard\"\n        type=\"search\"\n        name=\"filter\"\n        value={filter}\n        onChange={onCnange}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import { useDispatch } from 'react-redux';\nimport { deleteContacts } from 'redux/contacts/operations';\nimport { Container, Button, Typography } from '@mui/material';\n\nimport PropTypes from 'prop-types';\n\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContacts(id));\n\n  return (\n    <Container\n      sx={{\n        display: 'flex',\n        borderRadius: 'none',\n        justifyContent: 'center',\n        alignItems: 'center',\n        gap: '5px',\n      }}\n    >\n      <Typography sx={{fontWeight: \"700\"}}>{name}:</Typography>\n      <Typography>{number}</Typography>\n\n      <Button\n        variant=\"contained\"\n        sx={{\n          padding: '0px',\n        }}\n        type=\"button\"\n        onClick={handleDelete}\n      >\n        Delete\n      </Button>\n    </Container>\n  );\n};\n\nContactItem.propTypes = {\n  onDelete: PropTypes.func,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import { useSelector } from 'react-redux';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Container } from '@mui/material';\n\nimport PropTypes from 'prop-types';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  return (\n    <ul>\n      <Container\n        sx={{\n          display: 'flex',\n          flexDirection: \"column\",\n          borderRadius: 'none',\n          justifyContent: \"center\",\n          alignItems: \"flex-start\",\n          gap: \"10px\",\n        }}\n      >\n        {getVisibleContacts().map(({ id, name, number }) => {\n          return (\n            <li key={id}>\n              <ContactItem id={id} name={name} number={number} />\n            </li>\n          );\n        })}\n      </Container>\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  onDelete: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { Helmet } from 'react-helmet';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nimport { Paper } from '@mui/material';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {/* <Helmet> */}\n      <title>Your tasks</title>\n      {/* </Helmet> */}\n      <Paper\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          paddingTop: '20px',\n          borderRadius: 'none',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <div>{isLoading && 'Request in progress...'}</div>\n        <ContactForm />\n        <Filter />\n        <ContactList />\n      </Paper>\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","ContactForm","useSelector","dispatch","useDispatch","autoComplete","onSubmit","e","preventDefault","target","elements","name","number","find","contact","value","alert","currentTarget","reset","data","phone","addContacts","Container","sx","display","flexDirection","gap","border","borderRadius","padding","width","marginBottom","justifyContent","alignItems","htmlFor","TextField","type","label","variant","pattern","title","required","Button","Filter","onChange","evt","setFilter","ContactItem","id","Typography","fontWeight","onClick","deleteContacts","ContactList","normalizedFilter","toLowerCase","includes","getVisibleContacts","map","Tasks","useEffect","fetchContacts","Paper","paddingTop"],"sourceRoot":""}